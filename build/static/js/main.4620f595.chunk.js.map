{"version":3,"sources":["containers/Course/Course.js","containers/Courses/Courses.js","containers/Users/Users.js","components/noMatch.js","App.js","registerServiceWorker.js","index.js"],"names":["Course","state","courseTitle","this","parseQueryParams","query","URLSearchParams","props","location","search","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","param","value","setState","err","return","react_default","a","createElement","match","params","courseId","Component","Courses","courses","id","title","_this2","className","map","course","Link","key","to","pathname","url","Route","path","component","Users","noMatch","style","textAlign","App","BrowserRouter","NavLink","Switch","exact","Redirect","from","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4620f595.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Course extends Component {\n    state = {\n        courseTitle: ''\n    }\n\n    // Task 5\n    componentDidMount() {\n        this.parseQueryParams()\n    }\n\n    componentDidUpdate() {\n        this.parseQueryParams()\n    }\n\n    parseQueryParams() {\n        // console.log(this.props.location.search)\n        const query = new URLSearchParams(this.props.location.search)\n        for(let param of query.entries()) {\n            if ( this.state.courseTitle !== param[1] ){\n                this.setState({ courseTitle: param[1] })\n            }\n        }\n    }\n\n    render () {\n        return (\n            <div>\n            {/* Task 3 */}\n               \n                <h1>{this.state.courseTitle}</h1>\n                <p>You selected the Course with ID: {this.props.match.params.courseId} </p>\n            </div>\n        );\n    }\n}\n\nexport default Course;","import React, { Component } from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport Course from '../Course/Course';\nimport './Courses.css';\n\nclass Courses extends Component {\n    state = {\n        courses: [\n            { id: 1, title: 'Angular - The Complete Guide' },\n            { id: 2, title: 'Vue - The Complete Guide' },\n            { id: 3, title: 'PWA - The Complete Guide' }\n        ]\n    }\n\n    render () {\n        return (\n            <div>\n                <h1>Amazing Udemy Courses</h1>\n                <section className=\"Courses\">\n                    {\n                        this.state.courses.map( course => {\n                            return <Link \n                                    key={course.id}  \n                                    to={{\n                                        pathname: this.props.match.url + '/' + course.id,\n                                        search: '?title=' + course.title \n                                    }} > \n                                    <article className=\"Course\" >{course.title}</article>\n                                </Link>;\n                        } )\n                    }\n                </section>\n                <Route path={this.props.match.url+ '/:courseId'} component={Course} />\n            </div>\n        );\n    }\n}\n\nexport default Courses;\n\n{/* <article className=\"Course\" >{course.title}</article> */}","import React, { Component } from 'react';\n\nclass Users extends Component {\n    render () {\n        return (\n            <div>\n                <h1>The Users Page</h1>\n            </div>\n        );\n    }\n}\n\nexport default Users;","import React from 'react'\n\nconst noMatch = () => (\n    <h1 style={{ textAlign: 'center' }}> 404 Things were not found </h1>\n)\n\nexport default noMatch;","import React, { Component } from 'react';\nimport './App.css'\nimport Courses from './containers/Courses/Courses';\nimport Users from './containers/Users/Users';\nimport { Route, BrowserRouter, NavLink, Switch, Redirect } from 'react-router-dom';\nimport Course from './containers/Course/Course';\nimport noMatch from './components/noMatch';\n\n\nclass App extends Component {\n  render () {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          {/* <ol style={{textAlign: 'left'}}>\n            <li>Add Routes to load \"Users\" and \"Courses\" on different pages (by entering a URL, without Links)</li>\n            <li>Add a simple navigation with two links => One leading to \"Users\", one leading to \"Courses\"</li>\n            <li>Make the courses in \"Courses\" clickable by adding a link and load the \"Course\" component in the place of \"Courses\" (without passing any data for now)</li>\n            <li>Pass the course ID to the \"Course\" page and output it there</li>\n            <li>Pass the course title to the \"Course\" page - pass it as a param or score bonus points by passing it as query params (you need to manually parse them though!)</li>\n            <li>Load the \"Course\" component as a nested component of \"Courses\"</li>\n            <li>Add a 404 error page and render it for any unknown routes</li>\n            <li>Redirect requests to /all-courses to /courses (=> Your \"Courses\" page)</li>\n          </ol> */}\n                 \n          {/* Task 2 */}\n          <header>\n            <nav>\n              <ul>\n                <li>\n                  {/* NavLink enables active styling */}\n                  <NavLink to='/users'>Users</NavLink>\n                </li>\n                <li>\n                  <NavLink to='/courses'>Courses</NavLink>\n                </li>\n              </ul>\n            </nav>\n          </header>\n\n        \n          {/* Task 1 */}\n          <Switch>\n            <Route path='/users' exact component={Users} /> \n            <Route path='/courses' component={Courses} />\n            <Redirect from='/all-courses' to='/courses' />\n            <Route component={noMatch} />\n          </Switch>\n        \n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}